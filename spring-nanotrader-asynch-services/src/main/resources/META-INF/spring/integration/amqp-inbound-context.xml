<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:int-amqp="http://www.springframework.org/schema/integration/amqp"
	xmlns:int="http://www.springframework.org/schema/integration"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/integration/amqp https://www.springframework.org/schema/integration/amqp/spring-integration-amqp.xsd
		http://www.springframework.org/schema/integration https://www.springframework.org/schema/integration/spring-integration.xsd
		http://www.springframework.org/schema/task https://www.springframework.org/schema/task/spring-task.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd">

	<import resource="amqp-common-context.xml" />

<!--#################################################################### 
	Order Processing:
	a) Receives the order
	b) Creates an order record (inside the service activator)
	c) Creates a holding
	d) Updates the account balance
	c) Publishes a quote with an updated price
	#################################################################### -->
	
	<int-amqp:inbound-channel-adapter
		concurrent-consumers="10"
		mapped-request-headers="uniqueId" channel="toTradingServiceChannel"
		message-converter="jsonConverter" queue-names="nanotrader.order.queue"
		connection-factory="connectionFactory" />

	<int:channel id="toTradingServiceChannel">
		<int:interceptors>
			<int:wire-tap channel="toGeneralloggingChannel" />
		</int:interceptors>
	</int:channel>

	
	<int:service-activator input-channel="toTradingServiceChannel"
		output-channel="nullChannel" ref="tradingServiceFacadeImpl" method="saveOrderDirect">
		<int:request-handler-advice-chain>
			<ref bean="retryAdvice" />
		</int:request-handler-advice-chain>
	</int:service-activator>

<!--#################################################################### 
	Quote Processing: Receive it, Update it and log it to file
	#################################################################### -->

	<int-amqp:inbound-channel-adapter
		channel="toTradingServiceQuoteAggregatorChannel" message-converter="jsonConverter"
		queue-names="nanotrader.quote.queue" connection-factory="connectionFactory" />
	
	<int:channel id="toTradingServiceQuoteAggregatorChannel">
		<int:interceptors>
			<int:wire-tap channel="toGeneralloggingChannel" />
		</int:interceptors>
	</int:channel>
	
	<int:aggregator input-channel="toTradingServiceQuoteAggregatorChannel" output-channel="toTradingServiceQuoteChannel"
            ref="customAggregator"
            release-strategy-expression="size() == 20"
            correlation-strategy-expression="payload.symbol"
            message-store="messageStore"
            send-partial-result-on-expiry="true"
            expire-groups-upon-completion="true"/>
        
    <bean id="customAggregator" class="org.springframework.nanotrader.asynch.aggregator.QuoteAggregator"/>

    <bean id="messageStore" class="org.springframework.integration.store.SimpleMessageStore" />
      
    <int:channel id="toTradingServiceQuoteChannel" />
		
    <bean id="reaper" class="org.springframework.integration.store.MessageGroupStoreReaper">
        <property name="messageGroupStore" ref="messageStore"/>
        <property name="timeout" value="2000"/>
    </bean>
    
    <!--  Run reaper every 1 sec -->
    <task:scheduled-tasks scheduler="scheduler" >
        <task:scheduled ref="reaper"  method="run" fixed-rate="1000"/>
    </task:scheduled-tasks>

    <task:scheduler id="scheduler" pool-size="10"/>
    
	<int:service-activator input-channel="toTradingServiceQuoteChannel"
		output-channel="nullChannel" ref="tradingServiceImpl" method="updateQuote">
		<int:request-handler-advice-chain>
			<ref bean="retryAdvice" />
		</int:request-handler-advice-chain>
	</int:service-activator>
	

<!--#################################################################### 
	Retry Handling: 
	#################################################################### -->
	
	<bean id="retryAdvice" class="org.springframework.integration.handler.advice.RequestHandlerRetryAdvice">
		<property name="retryStateGenerator">
			<bean class="org.springframework.integration.handler.advice.SpelExpressionRetryStateGenerator">
				<constructor-arg value="headers['uniqueId']" />
			</bean>
		</property>
		<property name="recoveryCallback">
			<bean class="org.springframework.integration.handler.advice.ErrorMessageSendingRecoverer">
				<constructor-arg ref="toRecoveryHandlerChannel" />
			</bean>
		</property>
	</bean>

	<int:channel id="toRecoveryHandlerChannel" />
	
	<int:chain input-channel="toRecoveryHandlerChannel">
		<int:transformer expression="'Retries exceeded: permanently failed:' + payload.failedMessage + ' handled by recovery. Error Message: ' + payload.cause.message" />
		<int:logging-channel-adapter
			logger-name="org.springframework.nanotrader.asynch.generalLogger"
			level="INFO" />
	</int:chain>
	
<!--#################################################################### 
	General Logging: 
	#################################################################### -->
	<int:channel id="toGeneralloggingChannel" />

	<int:logging-channel-adapter 
		logger-name="org.springframework.nanotrader.asynch.generalLogger"
		channel="toGeneralloggingChannel" log-full-message="true"  level="INFO" />

</beans>
